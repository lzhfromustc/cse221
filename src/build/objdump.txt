Dump of assembler code for function get_read_overhead:
   0x000000000000118e <+0>:	f3 0f 1e fa	endbr64 
   0x0000000000001192 <+4>:	55	push   %rbp
   0x0000000000001193 <+5>:	48 89 e5	mov    %rsp,%rbp
   0x0000000000001196 <+8>:	53	push   %rbx
   0x0000000000001197 <+9>:	89 7d c4	mov    %edi,-0x3c(%rbp)
   0x000000000000119a <+12>:	48 c7 45 e0 00 00 00 00	movq   $0x0,-0x20(%rbp)
   0x00000000000011a2 <+20>:	c7 45 cc 00 00 00 00	movl   $0x0,-0x34(%rbp)
   0x00000000000011a9 <+27>:	eb 55	jmp    0x1200 <get_read_overhead+114>
   0x00000000000011ab <+29>:	0f a2	cpuid  
   0x00000000000011ad <+31>:	0f 31	rdtsc  
   0x00000000000011af <+33>:	89 d7	mov    %edx,%edi
   0x00000000000011b1 <+35>:	89 c6	mov    %eax,%esi
   0x00000000000011b3 <+37>:	89 7d d0	mov    %edi,-0x30(%rbp)
   0x00000000000011b6 <+40>:	89 75 d4	mov    %esi,-0x2c(%rbp)
   0x00000000000011b9 <+43>:	0f 01 f9	rdtscp 
   0x00000000000011bc <+46>:	89 d7	mov    %edx,%edi
   0x00000000000011be <+48>:	89 c6	mov    %eax,%esi
   0x00000000000011c0 <+50>:	0f a2	cpuid  
   0x00000000000011c2 <+52>:	89 7d d8	mov    %edi,-0x28(%rbp)
   0x00000000000011c5 <+55>:	89 75 dc	mov    %esi,-0x24(%rbp)
   0x00000000000011c8 <+58>:	8b 45 d0	mov    -0x30(%rbp),%eax
   0x00000000000011cb <+61>:	48 c1 e0 20	shl    $0x20,%rax
   0x00000000000011cf <+65>:	48 89 c2	mov    %rax,%rdx
   0x00000000000011d2 <+68>:	8b 45 d4	mov    -0x2c(%rbp),%eax
   0x00000000000011d5 <+71>:	48 09 d0	or     %rdx,%rax
   0x00000000000011d8 <+74>:	48 89 45 e8	mov    %rax,-0x18(%rbp)
   0x00000000000011dc <+78>:	8b 45 d8	mov    -0x28(%rbp),%eax
   0x00000000000011df <+81>:	48 c1 e0 20	shl    $0x20,%rax
   0x00000000000011e3 <+85>:	48 89 c2	mov    %rax,%rdx
   0x00000000000011e6 <+88>:	8b 45 dc	mov    -0x24(%rbp),%eax
   0x00000000000011e9 <+91>:	48 09 d0	or     %rdx,%rax
   0x00000000000011ec <+94>:	48 89 45 f0	mov    %rax,-0x10(%rbp)
   0x00000000000011f0 <+98>:	48 8b 45 f0	mov    -0x10(%rbp),%rax
   0x00000000000011f4 <+102>:	48 2b 45 e8	sub    -0x18(%rbp),%rax
   0x00000000000011f8 <+106>:	48 01 45 e0	add    %rax,-0x20(%rbp)
   0x00000000000011fc <+110>:	83 45 cc 01	addl   $0x1,-0x34(%rbp)
   0x0000000000001200 <+114>:	8b 45 cc	mov    -0x34(%rbp),%eax
   0x0000000000001203 <+117>:	3b 45 c4	cmp    -0x3c(%rbp),%eax
   0x0000000000001206 <+120>:	7c a3	jl     0x11ab <get_read_overhead+29>
   0x0000000000001208 <+122>:	48 8b 45 e0	mov    -0x20(%rbp),%rax
   0x000000000000120c <+126>:	48 85 c0	test   %rax,%rax
   0x000000000000120f <+129>:	78 07	js     0x1218 <get_read_overhead+138>
   0x0000000000001211 <+131>:	f2 48 0f 2a c0	cvtsi2sd %rax,%xmm0
   0x0000000000001216 <+136>:	eb 15	jmp    0x122d <get_read_overhead+159>
   0x0000000000001218 <+138>:	48 89 c2	mov    %rax,%rdx
   0x000000000000121b <+141>:	48 d1 ea	shr    %rdx
   0x000000000000121e <+144>:	83 e0 01	and    $0x1,%eax
   0x0000000000001221 <+147>:	48 09 c2	or     %rax,%rdx
   0x0000000000001224 <+150>:	f2 48 0f 2a c2	cvtsi2sd %rdx,%xmm0
   0x0000000000001229 <+155>:	f2 0f 58 c0	addsd  %xmm0,%xmm0
   0x000000000000122d <+159>:	f2 0f 2a 4d c4	cvtsi2sdl -0x3c(%rbp),%xmm1
   0x0000000000001232 <+164>:	f2 0f 5e c1	divsd  %xmm1,%xmm0
   0x0000000000001236 <+168>:	5b	pop    %rbx
   0x0000000000001237 <+169>:	5d	pop    %rbp
   0x0000000000001238 <+170>:	c3	retq   
End of assembler dump.
